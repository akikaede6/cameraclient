// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BstDemo397Rx.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "BstDemo397Rx.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

BstDemo397Rx::BstDemo397Rx()
{
    // m_HighBeamReq com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4ac3c60d
    m_HighBeamReq = 0;
    // m_WiperRequ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4facf68f
    m_WiperRequ = 0;
    // m_DoorsLockReq com.eprosima.idl.parser.typecode.PrimitiveTypeCode@76508ed1
    m_DoorsLockReq = 0;
    // m_FLDMControl com.eprosima.idl.parser.typecode.PrimitiveTypeCode@41e36e46
    m_FLDMControl = 0;

}

BstDemo397Rx::~BstDemo397Rx()
{




}

BstDemo397Rx::BstDemo397Rx(
        const BstDemo397Rx& x)
{
    m_HighBeamReq = x.m_HighBeamReq;
    m_WiperRequ = x.m_WiperRequ;
    m_DoorsLockReq = x.m_DoorsLockReq;
    m_FLDMControl = x.m_FLDMControl;
}

BstDemo397Rx::BstDemo397Rx(
        BstDemo397Rx&& x) noexcept 
{
    m_HighBeamReq = x.m_HighBeamReq;
    m_WiperRequ = x.m_WiperRequ;
    m_DoorsLockReq = x.m_DoorsLockReq;
    m_FLDMControl = x.m_FLDMControl;
}

BstDemo397Rx& BstDemo397Rx::operator =(
        const BstDemo397Rx& x)
{

    m_HighBeamReq = x.m_HighBeamReq;
    m_WiperRequ = x.m_WiperRequ;
    m_DoorsLockReq = x.m_DoorsLockReq;
    m_FLDMControl = x.m_FLDMControl;

    return *this;
}

BstDemo397Rx& BstDemo397Rx::operator =(
        BstDemo397Rx&& x) noexcept
{

    m_HighBeamReq = x.m_HighBeamReq;
    m_WiperRequ = x.m_WiperRequ;
    m_DoorsLockReq = x.m_DoorsLockReq;
    m_FLDMControl = x.m_FLDMControl;

    return *this;
}

bool BstDemo397Rx::operator ==(
        const BstDemo397Rx& x) const
{

    return (m_HighBeamReq == x.m_HighBeamReq && m_WiperRequ == x.m_WiperRequ && m_DoorsLockReq == x.m_DoorsLockReq && m_FLDMControl == x.m_FLDMControl);
}

bool BstDemo397Rx::operator !=(
        const BstDemo397Rx& x) const
{
    return !(*this == x);
}

size_t BstDemo397Rx::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t BstDemo397Rx::getCdrSerializedSize(
        const BstDemo397Rx& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void BstDemo397Rx::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_HighBeamReq;
    scdr << m_WiperRequ;
    scdr << m_DoorsLockReq;
    scdr << m_FLDMControl;

}

void BstDemo397Rx::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_HighBeamReq;
    dcdr >> m_WiperRequ;
    dcdr >> m_DoorsLockReq;
    dcdr >> m_FLDMControl;
}

/*!
 * @brief This function sets a value in member HighBeamReq
 * @param _HighBeamReq New value for member HighBeamReq
 */
void BstDemo397Rx::HighBeamReq(
        char _HighBeamReq)
{
    m_HighBeamReq = _HighBeamReq;
}

/*!
 * @brief This function returns the value of member HighBeamReq
 * @return Value of member HighBeamReq
 */
char BstDemo397Rx::HighBeamReq() const
{
    return m_HighBeamReq;
}

/*!
 * @brief This function returns a reference to member HighBeamReq
 * @return Reference to member HighBeamReq
 */
char& BstDemo397Rx::HighBeamReq()
{
    return m_HighBeamReq;
}

/*!
 * @brief This function sets a value in member WiperRequ
 * @param _WiperRequ New value for member WiperRequ
 */
void BstDemo397Rx::WiperRequ(
        char _WiperRequ)
{
    m_WiperRequ = _WiperRequ;
}

/*!
 * @brief This function returns the value of member WiperRequ
 * @return Value of member WiperRequ
 */
char BstDemo397Rx::WiperRequ() const
{
    return m_WiperRequ;
}

/*!
 * @brief This function returns a reference to member WiperRequ
 * @return Reference to member WiperRequ
 */
char& BstDemo397Rx::WiperRequ()
{
    return m_WiperRequ;
}

/*!
 * @brief This function sets a value in member DoorsLockReq
 * @param _DoorsLockReq New value for member DoorsLockReq
 */
void BstDemo397Rx::DoorsLockReq(
        char _DoorsLockReq)
{
    m_DoorsLockReq = _DoorsLockReq;
}

/*!
 * @brief This function returns the value of member DoorsLockReq
 * @return Value of member DoorsLockReq
 */
char BstDemo397Rx::DoorsLockReq() const
{
    return m_DoorsLockReq;
}

/*!
 * @brief This function returns a reference to member DoorsLockReq
 * @return Reference to member DoorsLockReq
 */
char& BstDemo397Rx::DoorsLockReq()
{
    return m_DoorsLockReq;
}

/*!
 * @brief This function sets a value in member FLDMControl
 * @param _FLDMControl New value for member FLDMControl
 */
void BstDemo397Rx::FLDMControl(
        char _FLDMControl)
{
    m_FLDMControl = _FLDMControl;
}

/*!
 * @brief This function returns the value of member FLDMControl
 * @return Value of member FLDMControl
 */
char BstDemo397Rx::FLDMControl() const
{
    return m_FLDMControl;
}

/*!
 * @brief This function returns a reference to member FLDMControl
 * @return Reference to member FLDMControl
 */
char& BstDemo397Rx::FLDMControl()
{
    return m_FLDMControl;
}


size_t BstDemo397Rx::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool BstDemo397Rx::isKeyDefined()
{
    return false;
}

void BstDemo397Rx::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}
