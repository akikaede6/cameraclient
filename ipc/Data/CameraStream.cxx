// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CameraStream.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CameraStream.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

CameraStream::CameraStream()
{
    // m_time_stamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@14dd9eb7
    m_time_stamp = 0;
    // m_buf_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@52e6fdee
    m_buf_index = 0;
    // m_message com.eprosima.idl.parser.typecode.SequenceTypeCode@6c80d78a

    // m_fps com.eprosima.idl.parser.typecode.PrimitiveTypeCode@62150f9e
    m_fps = 0.0;

}

CameraStream::~CameraStream()
{




}

CameraStream::CameraStream(
        const CameraStream& x)
{
    m_time_stamp = x.m_time_stamp;
    m_buf_index = x.m_buf_index;
    m_message = x.m_message;
    m_fps = x.m_fps;
}

CameraStream::CameraStream(
        CameraStream&& x) noexcept 
{
    m_time_stamp = x.m_time_stamp;
    m_buf_index = x.m_buf_index;
    m_message = std::move(x.m_message);
    m_fps = x.m_fps;
}

CameraStream& CameraStream::operator =(
        const CameraStream& x)
{

    m_time_stamp = x.m_time_stamp;
    m_buf_index = x.m_buf_index;
    m_message = x.m_message;
    m_fps = x.m_fps;

    return *this;
}

CameraStream& CameraStream::operator =(
        CameraStream&& x) noexcept
{

    m_time_stamp = x.m_time_stamp;
    m_buf_index = x.m_buf_index;
    m_message = std::move(x.m_message);
    m_fps = x.m_fps;

    return *this;
}

bool CameraStream::operator ==(
        const CameraStream& x) const
{

    return (m_time_stamp == x.m_time_stamp && m_buf_index == x.m_buf_index && m_message == x.m_message && m_fps == x.m_fps);
}

bool CameraStream::operator !=(
        const CameraStream& x) const
{
    return !(*this == x);
}

size_t CameraStream::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t CameraStream::getCdrSerializedSize(
        const CameraStream& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.message().size() > 0)
    {
        current_alignment += (data.message().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void CameraStream::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_time_stamp;
    scdr << m_buf_index;
    scdr << m_message;
    scdr << m_fps;

}

void CameraStream::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_time_stamp;
    dcdr >> m_buf_index;
    dcdr >> m_message;
    dcdr >> m_fps;
}

/*!
 * @brief This function sets a value in member time_stamp
 * @param _time_stamp New value for member time_stamp
 */
void CameraStream::time_stamp(
        uint64_t _time_stamp)
{
    m_time_stamp = _time_stamp;
}

/*!
 * @brief This function returns the value of member time_stamp
 * @return Value of member time_stamp
 */
uint64_t CameraStream::time_stamp() const
{
    return m_time_stamp;
}

/*!
 * @brief This function returns a reference to member time_stamp
 * @return Reference to member time_stamp
 */
uint64_t& CameraStream::time_stamp()
{
    return m_time_stamp;
}

/*!
 * @brief This function sets a value in member buf_index
 * @param _buf_index New value for member buf_index
 */
void CameraStream::buf_index(
        int32_t _buf_index)
{
    m_buf_index = _buf_index;
}

/*!
 * @brief This function returns the value of member buf_index
 * @return Value of member buf_index
 */
int32_t CameraStream::buf_index() const
{
    return m_buf_index;
}

/*!
 * @brief This function returns a reference to member buf_index
 * @return Reference to member buf_index
 */
int32_t& CameraStream::buf_index()
{
    return m_buf_index;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void CameraStream::message(
        const std::vector<char>& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void CameraStream::message(
        std::vector<char>&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::vector<char>& CameraStream::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::vector<char>& CameraStream::message()
{
    return m_message;
}
/*!
 * @brief This function sets a value in member fps
 * @param _fps New value for member fps
 */
void CameraStream::fps(
        float _fps)
{
    m_fps = _fps;
}

/*!
 * @brief This function returns the value of member fps
 * @return Value of member fps
 */
float CameraStream::fps() const
{
    return m_fps;
}

/*!
 * @brief This function returns a reference to member fps
 * @return Reference to member fps
 */
float& CameraStream::fps()
{
    return m_fps;
}


size_t CameraStream::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool CameraStream::isKeyDefined()
{
    return false;
}

void CameraStream::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}
